// Code generated by protoc-gen-go-micro. DO NOT EDIT.
// protoc-gen-go-micro version: v3.10.4
// source: main.proto

package pb

import (
	context "context"
	v3 "go.unistack.org/micro-client-http/v3"
	v31 "go.unistack.org/micro-server-http/v3"
	client "go.unistack.org/micro/v3/client"
	server "go.unistack.org/micro/v3/server"
	http "net/http"
)

type serverClient struct {
	c    client.Client
	name string
}

func NewServerClient(name string, c client.Client) ServerClient {
	return &serverClient{c: c, name: name}
}

func (c *serverClient) HOME(ctx context.Context, req *Empty, opts ...client.CallOption) (*StatusRsp, error) {
	errmap := make(map[string]interface{}, 1)
	errmap["default"] = &StatusRsp{}
	opts = append(opts,
		v3.ErrorMap(errmap),
	)
	opts = append(opts,
		v3.Method(http.MethodGet),
		v3.Path("/"),
	)
	rsp := &StatusRsp{}
	err := c.c.Call(ctx, c.c.NewRequest(c.name, "Server.HOME", req), rsp, opts...)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *serverClient) PUSH(ctx context.Context, req *PostBook, opts ...client.CallOption) (*StatusUploadedBookRsp, error) {
	errmap := make(map[string]interface{}, 1)
	errmap["default"] = &StatusRsp{}
	opts = append(opts,
		v3.ErrorMap(errmap),
	)
	opts = append(opts,
		v3.Method(http.MethodPost),
		v3.Path("/push"),
		v3.Body("*"),
	)
	rsp := &StatusUploadedBookRsp{}
	err := c.c.Call(ctx, c.c.NewRequest(c.name, "Server.PUSH", req), rsp, opts...)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *serverClient) GET(ctx context.Context, req *GetBookReq, opts ...client.CallOption) (*GetBookRsp, error) {
	errmap := make(map[string]interface{}, 1)
	errmap["default"] = &StatusRsp{}
	opts = append(opts,
		v3.ErrorMap(errmap),
	)
	opts = append(opts,
		v3.Method(http.MethodGet),
		v3.Path("/push"),
	)
	rsp := &GetBookRsp{}
	err := c.c.Call(ctx, c.c.NewRequest(c.name, "Server.GET", req), rsp, opts...)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

type serverServer struct {
	ServerServer
}

func (h *serverServer) HOME(ctx context.Context, req *Empty, rsp *StatusRsp) error {
	return h.ServerServer.HOME(ctx, req, rsp)
}

func (h *serverServer) PUSH(ctx context.Context, req *PostBook, rsp *StatusUploadedBookRsp) error {
	return h.ServerServer.PUSH(ctx, req, rsp)
}

func (h *serverServer) GET(ctx context.Context, req *GetBookReq, rsp *GetBookRsp) error {
	return h.ServerServer.GET(ctx, req, rsp)
}

func RegisterServerServer(s server.Server, sh ServerServer, opts ...server.HandlerOption) error {
	type server interface {
		HOME(ctx context.Context, req *Empty, rsp *StatusRsp) error
		PUSH(ctx context.Context, req *PostBook, rsp *StatusUploadedBookRsp) error
		GET(ctx context.Context, req *GetBookReq, rsp *GetBookRsp) error
	}
	type Server struct {
		server
	}
	h := &serverServer{sh}
	var nopts []server.HandlerOption
	nopts = append(nopts, v31.HandlerEndpoints(ServerServerEndpoints))
	return s.Handle(s.NewHandler(&Server{h}, append(nopts, opts...)...))
}
